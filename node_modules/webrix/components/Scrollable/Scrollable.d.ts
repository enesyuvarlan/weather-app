export default class Scrollable {
    static propTypes: {
        style: any;
        onScroll: any;
        onUpdate: any;
        scrollOnDOMChange: any;
        children: any;
        element: any;
        cssVarsOnTracks: any;
    };
    static defaultProps: {
        style: any;
        onScroll: any;
        onUpdate: any;
        scrollOnDOMChange: boolean;
        children: any;
        element: any;
        cssVarsOnTracks: boolean;
    };
    constructor(props: any);
    container: any;
    event: {
        prev: {};
        next: {};
    };
    state: {
        cssVarsOnTracks: any;
        scrollTop: number;
        scrollLeft: number;
        container: any;
    };
    getSnapshotBeforeUpdate(): {
        scrollTop: any;
        scrollLeft: any;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: any, prevState: any, { scrollTop, scrollLeft }: {
        scrollTop: any;
        scrollLeft: any;
    }): void;
    handleOnScroll: (e: any) => void;
    timeout: NodeJS.Timeout;
    getEvent: () => {
        top?: undefined;
        left?: undefined;
        scrollTop?: undefined;
        scrollLeft?: undefined;
        scrollHeight?: undefined;
        scrollWidth?: undefined;
        clientHeight?: undefined;
        clientWidth?: undefined;
    } | {
        top: number;
        left: number;
        scrollTop: number;
        scrollLeft: number;
        scrollHeight: any;
        scrollWidth: any;
        clientHeight: any;
        clientWidth: any;
    };
    shouldUpdateScrollbars(event: any): boolean;
    updateScrollbars: () => void;
    getElementProps: () => {
        className: string;
        ref: any;
        onScroll: (e: any) => void;
    };
    handleOnTransitionEnd: (e: any) => void;
    render(): any;
}
